@page "/users"
@inject UserServices userServices

<h3>Users List</h3>

@if (users == null || users.Count == 0)
{
    <h2>No user found</h2>
}
else
{
    <a href="users/create" style="text-decoration: none;" class="button is-primary is-outlined is-small">Add User</a>
    <div class="table-container">
        <table class="table is-striped">
            <thead>
                <tr class="th">
                    <th>Identifier</th>
                    <th>Email</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    url[0] = $"users/edit/{user.Id}";
                    url[1] = $"users/details/{user.Id}";
                    <tr>
                        <td>@user.TRCId</td>
                        <td>@user.Email</td>
                        <td>
                            <a href="@url[0]" class="button is-info is-light is-small ">Edit</a>
                            <a href="@url[1]" class="button is-info is-light is-small ">Details</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {

    private ModalComponent Modal { get; set; }
    List<User> users;

    string[] url = new string[2];

    protected async override Task OnInitializedAsync()
    {
        users = await userServices.GetAllUserAsync();
    }

    private void HandleDelete()
    {

    }
}