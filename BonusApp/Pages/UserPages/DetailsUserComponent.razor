@page "/users/details/{Id:int}"
@inject UserServices userServices
@inject BonusServices bonusServices
@inject UserBonusServices userBonusServices
@inject NavigationManager navManager
@inject RefreshServices refreshServices

<h3>Client Details</h3>
<p><strong>Client: </strong>@user.Email</p>
<AddBonusComponent user="user" />
<div class="content">
    @if (user.UserBonuses.Count == 0)
    {
        <p class="has-background-warning-light">@user.Email does not have any coupon.</p>
    }
    else
    {
        <p class="mb-2 has-text-grey-light is-italic">Total Coupons: @user.UserBonuses.Count</p>
        @foreach (var item in user.UserBonuses)
        {
            {
                GetRemainingPages(item.BonusId, item.SpentPages);
            }
            if (remainingPages == 0)
            {
                <p class="is-marginless @CssAccordingToRemainingPage()" style="color: lightgray;"><strong style="color: lightgray;">Coupon Id: </strong>@item.TRCId</p>
            }
            else
            {
                <p class="is-marginless @CssAccordingToRemainingPage()" style="color: white;"><strong style="color: white;">Coupon Id: </strong><a style="color: white;" href=@($"bonuspurchased/discountpages/{item.Id}")>@item.TRCId</a></p>
            }
            <p class="is-marginless"><strong>Coupon name: </strong>  @item.Bonus.Name</p>
            <p class="is-marginless"><strong>Issued date:     </strong>@item.Date</p>
            <p class="is-marginless"><strong>Printed pages: </strong>@item.SpentPages</p>
            <p class="is-marginless"><strong>Remaining pages:     </strong>@remainingPages</p>
            <hr />
        }
    }
</div>
<a href="users" style="text-decoration: none;" class="button is-info  is-link is-outlined">Back to List</a>

@code {
    User user = new User();
    Bonus bonus = new Bonus();

    [Parameter] public int Id { get; set; }
    private int remainingPages;

    protected async override Task OnInitializedAsync()
    {
        user = await userServices.GetUserAsync(Id);
        refreshServices.RefreshRequested += RefreshMe;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        user = await userServices.GetUserAsync(Id);
    }

    private void RefreshMe()
    {
        user.UserBonuses = userBonusServices.GetAllUserBonusByUserIdAsync(user.Id).Result;
        StateHasChanged();
    }

    private void GetRemainingPages(int bonusId, int spentPages)
    {
        remainingPages = (bonusServices.GetBonusAsync(bonusId).Result).Pages - spentPages;
    }

    private string CssAccordingToRemainingPage()
    {
        if (remainingPages == 0)
        {
            return "has-background-danger-light";
        }
        return "has-background-info-dark";
    }
}
