@inject BonusServices bonusServices
@inject UserBonusServices userBonusServices
@inject UserServices userServices
@inject IModalService myModal
@inject NavigationManager navManager
@inject RefreshServices refreshServices


<div>
    <div class="field is-horizontal">
        <label class="label" for="BonusInput">Coupon:</label>
        <div class="control">
            <select name="bonus" id="BonusInput" @onchange="((arg)=> selectedValue = Convert.ToInt32(arg.Value))">
                <option value="0">Select coupon</option>
                @foreach (var bonus in bonuses)
                {
                    <option value="@bonus.Id">@bonus.Name</option>
                }
            </select>
        </div>
        <a class="button is-success is-small is-link is-outlined mx-2" @onclick="AddBonusToSelectBoxAsync">Add</a>
        <select name="bonus-selected" size="5" style="width:100px;" multiple>
            @foreach (var bonus in strBonusesToAddToUser)
            {
                <option>@bonus</option>
            }
        </select>
        <a class="button is-danger is-small  is-link is-outlined mx-2" @onclick="Clear">Clear</a>
    </div>
    <button class="button is-success  is-link is-outlined mx-1" @onclick="AddBonus">Add Coupon</button>
</div>

@code {
    [Parameter] public User user { get; set; }
    List<Bonus> bonuses = new List<Bonus>();
    private int selectedValue;
    private List<string> strBonusesToAddToUser = new List<string>();
    private List<int> intBonusesToAddToUser = new List<int>();

    List<Bonus> bonusesToAddToUser = new List<Bonus>();

    protected async override Task OnInitializedAsync()
    {
        bonuses = await bonusServices.GetAllBonusAsync();
    }

    private void Clear()
    {
        intBonusesToAddToUser = new List<int>();
        strBonusesToAddToUser = new List<string>();
        bonusesToAddToUser = new List<Bonus>();
    }

    private async Task AddBonus()
    {
        List<UserBonus> userBonusList = new List<UserBonus>();
        foreach (var bonus in bonusesToAddToUser)
        {
            userBonusList.Add(new UserBonus
            {
                UserId = user.Id,
                BonusId = bonus.Id,
                Date = DateTime.Now,
                SpentPages = 0
            });
        }
        user.UserBonuses = userBonusList;

        if (userBonusServices.AddListUserBonusAsyncWSQL(userBonusList))
        {
            var messageForm = myModal.Show<ConfirmCreateComponent>($"The coupon has been added to {user.Email}.");
            var result = await messageForm.Result;
        }
        else
        {
            var messageForm = myModal.Show<ConfirmCreateComponent>($"ERROR: The coupons could not have been added.");
            var result = await messageForm.Result;
        }

        Clear();
        bonuses = await bonusServices.GetAllBonusAsync();

        refreshServices.CallRequestRefresh();
    }

    private async Task AddBonusToSelectBoxAsync()
    {
        if (selectedValue != 0 && intBonusesToAddToUser.Contains(selectedValue) == false)
        {
            intBonusesToAddToUser.Add(selectedValue);
            Bonus bonusToAddToUser = await bonusServices.GetBonusAsync(selectedValue);
            bonusesToAddToUser.Add(bonusToAddToUser);
            strBonusesToAddToUser.Add(bonusToAddToUser.Name);
        }
    }
}
