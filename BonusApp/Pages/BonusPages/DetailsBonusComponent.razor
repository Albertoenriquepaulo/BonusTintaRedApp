@page "/bonuspurchased/details/{Id:int}"
@inject BonusServices bonusServices
@inject UserBonusServices userBonusServices
@inject BonusSpendingServices bonusSpendingServices
<h3>Bonus Details</h3>

<div class="content">
    <p><strong>Client: </strong>@userBonus.User.Email</p>
    @if (bonusSpending.Count == 0)
    {
        <p class="has-background-warning-light">There is no transaction for this bonus.</p>
    }
    else
    {
        <p class="is-marginless has-background-info-dark" style="color: white;"><strong style="color: white;">Bonus Id: </strong>@userBonus.TRCId</p>
        <p class="is-marginless has-background-info-dark" style="color: white;"><strong style="color: white;">Total Bonus Pages: </strong>@totalBonusPages</p>
        <p class="is-marginless has-background-danger-dark" style="color: white;"><strong style="color: white;">Page remaining: </strong>@totalRemainingPages</p>
        @foreach (var item in bonusSpending)
        {
            <p class="is-marginless"><strong>Transaction Date:     </strong>@item.Date</p>
            <p class="is-marginless"><strong>Spent pages: </strong>@item.SpentPages</p>
            <hr class="my-0" />
        }

    }
</div>
<a href="bonuspurchased/allbonus" style="text-decoration: none;" class="button is-info  is-link is-outlined">Back to List</a>


@code {
    [Parameter] public int Id { get; set; }
    private List<BonusSpending> bonusSpending { get; set; }
    private UserBonus userBonus { get; set; }
    private int totalBonusPages { get; set; }
    private int totalRemainingPages { get; set; }

    protected async override Task OnInitializedAsync()
    {
        userBonus = await userBonusServices.GetBonusIdByUserBonusIdAsync(Id);
        totalBonusPages = (await bonusServices.GetBonusAsync(userBonus.BonusId)).Pages;
        bonusSpending = await bonusSpendingServices.GetAllBonusSpendingByBonusIdAsync(userBonus.BonusId, userBonus.UserId);

        if (bonusSpending.Count > 0)
        {
            foreach (var item in bonusSpending)
            {
                totalRemainingPages += (await bonusSpendingServices.GetSpentPagesByBonusSpendingId(item.Id));
            }
            totalRemainingPages = totalBonusPages - totalRemainingPages;
        }
    }

    private async Task<int> GetPageRemaining(BonusSpending oBS)
    {
        return await bonusSpendingServices.GetSpentPagesByBonusSpendingId(oBS.Id) - totalBonusPages;
    }
}
