@page "/bonuspurchased/details/{Id:int}"
@inject BonusServices bonusServices
@inject UserBonusServices userBonusServices
@inject BonusSpendingServices bonusSpendingServices
<h3>Coupon Details</h3>

<div class="content">
    <p><strong>Client: </strong>@userBonus.User.Email</p>
    @if (bonusSpending.Count == 0)
    {
        <p class="has-background-warning-light">There is no transaction for this bonus.</p>
    }
    else
    {
        <div class="card mb-3" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Coupon Id: @userBonus.TRCId</h5>
                <h6 class="card-subtitle mb-2 text-muted">Total Coupon Pages:  @totalBonusPages</h6>
                <p class="card-text ">Remaining pages: @totalRemainingPages </p>
            </div>
        </div>

        <div class="table-container">
            <table class="table is-striped align-middle" id="myTable">
                <thead>
                    <tr class="th has-text-centered">
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in bonusSpending)
                    {
                        <tr>
                            <td>
                                <div>
                                    <p class="is-marginless"><strong>Transaction Date:     </strong>@item.Date</p>
                                    <p class="is-marginless"><strong>Printed pages: </strong>@item.SpentPages</p>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    }
</div>
<a href="bonuspurchased/allbonus" style="text-decoration: none;" class="button is-info  is-link is-outlined">Back to List</a>

@code {
    [Parameter] public int Id { get; set; }
    private List<BonusSpending> bonusSpending { get; set; }
    private UserBonus userBonus { get; set; }
    private int totalBonusPages { get; set; }
    private int totalRemainingPages { get; set; }

    protected async override Task OnInitializedAsync()
    {
        userBonus = await userBonusServices.GetBonusIdByUserBonusIdAsync(Id);
        totalBonusPages = (await bonusServices.GetBonusAsync(userBonus.BonusId)).Pages;
        //bonusSpending = await bonusSpendingServices.GetAllBonusSpendingByBonusIdAsync(userBonus.BonusId, userBonus.UserId);
        bonusSpending = await bonusSpendingServices.GetAllBonusSpendingByBonusIdAndUserBonusIdAsync(userBonus.BonusId, userBonus.Id);

        if (bonusSpending.Count > 0)
        {
            foreach (var item in bonusSpending)
            {
                totalRemainingPages += (await bonusSpendingServices.GetSpentPagesByBonusSpendingId(item.Id));
            }
            totalRemainingPages = totalBonusPages - totalRemainingPages;
        }
    }

    private async Task<int> GetPageRemaining(BonusSpending oBS)
    {
        return await bonusSpendingServices.GetSpentPagesByBonusSpendingId(oBS.Id) - totalBonusPages;
    }
}
