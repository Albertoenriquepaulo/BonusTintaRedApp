@page "/bonus/allbonus"
@inject UserBonusServices userBonusServices
@inject IJSRuntime JSRuntime
@inject IModalService myModal

<h3>All Bonus List</h3>

@if (userBonuses == null || userBonuses.Count == 0)
{
    <h2>No user found</h2>
    <a href="bonus/create" class="button is-primary is-outlined is-small">Add Bond</a>
}
else
{
    <div class="table-container">
        <table class="table is-striped" id="myTable">
            <thead>
                <tr class="th">
                    <th>Identifier</th>
                    <th>Bonus Type</th>
                    <th>Pages</th>
                    <th>Pages Spent</th>
                    <th>Pages Available</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var userBonus in userBonuses)
                {
                    url[2] = $"bonus/discountpages/{userBonus.Id}";
                    <tr>
                        <td>@userBonus.TRCId</td>
                        <td>@userBonus.Bonus.Name</td>
                        <td>@userBonus.Bonus.Pages</td>
                        <th>@userBonus.SpentPages</th>
                        <th>@(userBonus.Bonus.Pages - userBonus.SpentPages)</th>
                        <td>
                            <a @onclick="@(()=>HandleDelete(userBonus))" class="button is-danger is-light is-small">Delete</a>
                            <a href="@url[2]" class="button is-success is-light is-small">Discount Pages</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
}


@code {

    List<UserBonus> userBonuses;
    string[] url = new string[3];

    protected async override Task OnInitializedAsync()
    {
        userBonuses = await userBonusServices.GetAllUserBonusAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<object>("DataTable");
    }

    private async Task HandleDelete(UserBonus userBonus)
    {
        var messageForm = myModal.Show<ConfirmDeleteComponent>($"Are you sure you want to delete the {userBonus.TRCId} bonus?");
        var result = await messageForm.Result;

        if (result.Cancelled)
        {
            return;
        }

        if ((bool)result.Data)
        {
            await userBonusServices.DeleteUserBonusAsync(userBonus);
            userBonuses = await userBonusServices.GetAllUserBonusAsync();
        }

    }

}
