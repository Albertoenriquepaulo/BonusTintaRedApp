@page "/bonus/discountpages/{Id:int}"
@inject UserBonusServices userBonusServices
@inject BonusServices bonusServices
@inject BonusSpendingServices bonusSpendingServices
@inject UserServices userServices
@inject IModalService myModal
@inject NavigationManager navManager

<h3>Discount Pages</h3>
<div style="display: flex;">
    <h4 class="is-marginless pt-2 pr-2 has-text-link">Bonus Id: </h4>
    <h1 class="is-marginless has-text-link-dark">@userBonus.TRCId</h1>
</div>

<EditForm Model="bonusSpending" OnValidSubmit="AddPageToDiscount">
    <DataAnnotationsValidator />
    <div class="field">
        <label class="label">Discount to apply</label>
        <div class="control">
            <InputNumber class="input" type="number" placeholder="Number input" @bind-Value="@bonusSpending.SpentPages" />
            <ValidationMessage For="@(()=>bonusSpending.SpentPages)" />
        </div>

    </div>

    <button class="button is-success  is-link is-outlined" type="submit">Discount Pages</button>
    <a href="bonus/allbonus" style="text-decoration: none;" class="button is-info  is-link is-outlined">Back to List</a>
</EditForm>

@code {
    [Parameter] public int Id { get; set; }
    public User user { get; set; }

    private BonusSpending bonusSpending = new BonusSpending();

    private UserBonus userBonus;
    private Bonus bonus;

    protected async override Task OnInitializedAsync()
    {
        userBonus = await userBonusServices.GetUserBonusAsync(Id);
        user = await userServices.GetUserAsync(userBonus.UserId);
        bonus = await bonusServices.GetBonusAsync(userBonus.BonusId);
    }

    private async Task AddPageToDiscount()
    {
        bonusSpending.User = user;
        bonusSpending.Bonus = bonus;
        bonusSpending.Date = DateTime.Now;
        if (await userBonusServices.DiscountPagesAsync(userBonus, bonusSpending.SpentPages) == false)
        {
            myModal.Show<ConfirmCreateComponent>("ERROR: The discount could not be applied...");
            return;
        }
        await bonusSpendingServices.AddBonusSpendingAsync(bonusSpending);

        var messageForm = myModal.Show<ConfirmCreateComponent>($"The discount has been applied.");
        var result = await messageForm.Result;

        navManager.NavigateTo("bonus/allbonus");
    }

}
