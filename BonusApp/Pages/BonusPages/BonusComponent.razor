@page "/bonus"
@inject BonusServices bonusServices
@inject IModalService myModal

<h3>Coupon Types</h3>

<a style="text-decoration:none;" href="bonus/create" class="button is-primary is-link is-outlined is-small">Create Bonus</a>
@if (bonuses == null || bonuses.Count == 0)
{
    <h2>No Coupon found</h2>
}
else
{
    <div class="table-container">
        <table class="table is-striped">
            <thead>
                <tr class="th has-text-centered">
                    <th>Identifier</th>
                    <th>Name</th>
                    <th>Pages</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var bonus in bonuses)
                {
                    url = $"bonus/edit/{bonus.Id.ToString()}";
                    <tr class="has-text-centered">
                        <td style="vertical-align: middle">@(index++)</td>
                        <td style="vertical-align: middle">@bonus.Name</td>
                        <td style="vertical-align: middle">@bonus.Pages</td>
                        <td style="vertical-align: middle">
                            <a href="@url" class="button is-info is-small is-outlined" style="text-decoration:none;">Edit</a>
                            <a @onclick="@(()=>HandleDelete(bonus))" class="button is-danger is-link  is-small is-outlined">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
}


@code {
    List<Bonus> bonuses;
    private int index;
    string url;

    protected async override Task OnInitializedAsync()
    {
        index = 1;
        bonuses = await bonusServices.GetAllBonusAsync();
    }

    private async Task HandleDelete(Bonus bonus)
    {
        var messageForm = myModal.Show<ConfirmDeleteComponent>($"Are you sure you want to delete the {bonus.Name} coupon?");
        var result = await messageForm.Result;

        if (result.Cancelled)
        {
            return;
        }

        if ((bool)result.Data)
        {
            await bonusServices.DeleteBonusAsync(bonus);
            bonuses = await bonusServices.GetAllBonusAsync();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        index = 1;
    }
}
