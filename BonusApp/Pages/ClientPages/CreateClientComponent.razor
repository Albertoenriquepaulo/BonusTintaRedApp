@page "/clients/create"
@inject ClientServices clientServices
@inject CouponServices couponServices
@inject IModalService myModal
@inject NavigationManager navManager
@inject EmailHelper emailHelper
@inject NotificationService notificationService

<h3>New Client</h3>

<EditForm Model="client" OnValidSubmit="Create">
    <DataAnnotationsValidator />
    <div class="field">
        <label class="label">Email</label>
        <div class="control">
            <InputText class="input" type="text" placeholder="Client email" @bind-Value="@client.Email" />
            <ValidationMessage For="@(()=>client.Email)" />
        </div>
    </div>

    <div class="card mb-3" style="width: 33rem;">
        <div class="card-body is-vcentered is-centered">
            <div class="field is-horizontal mb-0 pb-0">
                <label class="label mx-1" for="CouponInput">Coupon</label>
                <div class="control">
                    <select name="coupon" id="CouponInput" @onchange="((arg)=> selectedValue = Convert.ToInt32(arg.Value))">
                        <option value="0">Select coupon</option>
                        @foreach (var coupon in coupons)
                        {
                            <option value="@coupon.Id">@coupon.Name</option>
                        }
                    </select>
                </div>
                <a class="button is-success is-small  is-link is-outlined mx-2" @onclick="AddCouponAsync">Add</a>
                <select name="coupon-selected" size="5" style="width:100px;" multiple>
                    @foreach (var coupon in strCouponsToAddToClient)
                    {
                        <option>@coupon</option>
                    }
                </select>
                <div>
                    <a class="button is-danger is-small  is-link is-outlined mx-2" @onclick="Clear">Clear</a>
                    <p class="is-size-7 is-small mt-1 ml-3">@strCouponsToAddToClient.Count Coupons selected</p>
                </div>

            </div>
            <div>
                <RadzenCheckBox TValue="bool" @bind-Value="@SentEmailCheckBoxValue" />
                <RadzenLabel Text="Send email" Component="SentEmailCheckBox" />
            </div>
        </div>
    </div>

    <button class="button is-success  is-link is-outlined mx-1" type="submit">Create</button>
    <BackButtonComponent />
</EditForm>

@code {
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    bool SentEmailCheckBoxValue = true;
    private Client client = new Client();
    List<Coupon> coupons = new List<Coupon>();

    private int selectedValue;
    private List<int> intCouponsToAddToClient = new List<int>();
    List<Coupon> couponsToAddToClient = new List<Coupon>();
    private List<string> strCouponsToAddToClient = new List<string>();
    List<ClientCoupon> clientCouponList;

    protected async override Task OnInitializedAsync()
    {
        coupons = await couponServices.GetAllCouponAsync();
    }

    private async Task Create()
    {
        int notificationDuration = 10000;
        clientCouponList = new List<ClientCoupon>();
        foreach (var coupon in couponsToAddToClient)
        {
            clientCouponList.Add(new ClientCoupon
            {
                Date = DateTime.Now.ToString(),
                SpentPages = 0,
                Client = client,
                Coupon = coupon
            });
        }
        client.ClientCoupons = clientCouponList;

        if (await clientServices.AddClientAsync(client) == null)
        {
            await ShowNotificationAsync(BuildNotificationMessage(NotificationSeverity.Error, client.Email,
                                                                "Error. User have not been created", notificationDuration));

            return;
        }

        await ShowNotificationAsync(BuildNotificationMessage(NotificationSeverity.Success, client.Email,
                                                                "User has been created", notificationDuration * 2));

        if (clientCouponList.Count == 0)
        {
            navManager.NavigateTo($"clients/details/{client.Id}");
            return;
        }
        var options = new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true
        };

        List<string> trcIdResultList = clientCouponList.Select(cp => cp.TRCId).ToList();

        if (SentEmailCheckBoxValue)
        {
            var messageForm = myModal.Show<SpinnerComponent>($"Sending Email...", options);
            var result = await messageForm.Result;

            if (SendEmailWithHtmTemplate(trcIdResultList) && (bool)result.Data)
            {
                await ShowNotificationAsync(BuildNotificationMessage(NotificationSeverity.Info,
                                                                        "Emails", "have been sent", notificationDuration));
            }
        }

        navManager.NavigateTo($"clients/details/{client.Id}");
    }

    private async Task AddCouponAsync()
    {
        if (selectedValue != 0)
        {
            intCouponsToAddToClient.Add(selectedValue);
            Coupon couponToAddToClient = await couponServices.GetCouponAsync(selectedValue);
            couponsToAddToClient.Add(couponToAddToClient);
            strCouponsToAddToClient.Add(couponToAddToClient.Name);
        }
    }

    private void Clear()
    {
        intCouponsToAddToClient = new List<int>();
        strCouponsToAddToClient = new List<string>();
    }

    private bool SendEmailWithHtmTemplate(List<string> trcIdResultList)
    {
        Pdf pdfHelper = new Pdf();
        List<string> emailSubjectList = new List<string>();
        List<EmailBody> emailBodies = new List<EmailBody>();
        try
        {
            foreach (var clientCoupon in clientCouponList)
            {
                EmailBody emailBody = new EmailBody();
                emailSubjectList.Add(clientCoupon.TRCId);
                emailBody.CreateBody(clientCoupon.TRCId, clientCoupon.Coupon.Pages, clientCoupon.Coupon.Name.Contains("COLOR") ? "Color" : "Blanco y Negro");
                emailBodies.Add(emailBody);
            }
            emailHelper.SendHtmTemplateListByEmail(client.Email, emailSubjectList, emailBodies);
        }

        catch (Exception)
        {
            return false;
        }
        return true;
    }

    async Task ShowNotificationAsync(NotificationMessage message)
    {
        notificationService.Notify(message);

        events.Add(DateTime.Now, $"{message.Severity} notification");
        await InvokeAsync(() => { StateHasChanged(); });
    }

    NotificationMessage BuildNotificationMessage(NotificationSeverity notification, string summary, string detail, int duration)
    {
        return new NotificationMessage()
        {
            Severity = notification,
            Summary = summary,
            Detail = detail,
            Duration = duration
        };
    }

}