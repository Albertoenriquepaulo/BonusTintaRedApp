@page "/clients/details/{Id:int}"
@inject ClientServices clientServices
@inject CouponServices couponServices
@inject ClientCouponServices clientCouponServices
@inject NavigationManager navManager
@inject RefreshServices refreshServices
@inject IJSRuntime JSRuntime

<h3>Client Details</h3>
<p><strong>Client: </strong>@client.Email</p>
<div class="card mb-3" style="width: 33rem;">
    <div class="card-body is-vcentered is-centered">
        <AddCouponComponent client="client" />
    </div>
</div>

<div class="content">
    @if (client.ClientCoupons.Count == 0)
    {
        <p class="has-background-warning-light">@client.Email does not have any coupon.</p>
    }
    else
    {
        <p class="mb-2 has-text-grey-light is-italic">Total Coupons: @client.ClientCoupons.Count</p>
        @foreach (var item in client.ClientCoupons)
        {
            {
                GetRemainingPages(item.CouponId, item.SpentPages);
            }
            if (remainingPages == 0)
            {
                <p class="is-marginless @CssAccordingToRemainingPage()" style="color: lightgray;"><strong style="color: lightgray;">Coupon Id: </strong>@item.TRCId</p>
            }
            else
            {
                <p class="is-marginless @CssAccordingToRemainingPage()" style="color: white;">
                    <strong style="color: white;">Coupon Id: </strong>
                    <a style="color: white; text-decoration:underline" data-toggle="tooltip" data-placement="top" title="Click to set pages"
                       href=@($"couponpurchased/discountpages/{item.Id}")>
                        @item.TRCId
                    </a>
                    <PdfDownloadComponent CouponName="@item.Coupon.Name" TRCId="@item.TRCId" />
                </p>

            }
            <p class="is-marginless"><strong>Coupon name: </strong>  @item.Coupon.Name</p>
            <p class="is-marginless"><strong>Issued date:     </strong>@item.Date</p>
            <p class="is-marginless"><strong>Printed pages: </strong>@item.SpentPages</p>
            <p class="is-marginless"><strong>Remaining pages:     </strong>@remainingPages</p>
            <hr />
        }
    }
</div>
<BackButtonComponent />

@code {
    Client client = new Client();
    Coupon coupon = new Coupon();

    [Parameter] public int Id { get; set; }
    private int remainingPages;

    protected async override Task OnInitializedAsync()
    {
        client = await clientServices.GetClientAsync(Id);
        refreshServices.RefreshRequested += RefreshMe;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        client = await clientServices.GetClientAsync(Id);
    }

    private void RefreshMe()
    {
        client.ClientCoupons = clientCouponServices.GetAllClientCouponByClientIdAsync(client.Id).Result;
        StateHasChanged();
    }

    private void GetRemainingPages(int couponId, int spentPages)
    {
        remainingPages = (couponServices.GetCouponAsync(couponId).Result).Pages - spentPages;
    }

    private string CssAccordingToRemainingPage()
    {
        if (remainingPages == 0)
        {
            return "has-background-danger-light";
        }
        return "has-background-info-dark";
    }

    public async Task DownloadFile(string couponName, string TRCId)
    {
        Pdf pdfFile = new Pdf("pdfs", couponName, TRCId);
        MemoryStream mem = pdfFile.Create();
        if (mem == null)
        {
            return;
        }
        await JSRuntime.InvokeAsync<object>(
            "saveAsFile",
            $"{TRCId}.pdf",
            Convert.ToBase64String(mem.ToArray()));
    }
}