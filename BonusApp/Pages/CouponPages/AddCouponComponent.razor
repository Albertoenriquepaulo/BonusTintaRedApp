@inject CouponServices couponServices
@inject ClientCouponServices clientCouponServices
@inject ClientServices clientServices
@inject IModalService myModal
@inject NavigationManager navManager
@inject RefreshServices refreshServices
@inject EmailHelper emailHelper

@inject NotificationService notificationService

<div>
    <div class="field is-horizontal mb-0">
        <label class="label" for="CouponInput">Coupon:</label>
        <div class="control">
            <select name="coupon" id="CouponInput" @onchange="((arg)=> selectedValue = Convert.ToInt32(arg.Value))">
                <option value="0" selected=@selected>Select coupon</option>
                @foreach (var coupon in coupons)
                {
                    <option value="@coupon.Id">@coupon.Name</option>
                }
            </select>
        </div>
        <a class="button is-success is-small is-link is-outlined mx-2" @onclick="AddCouponToSelectBoxAsync">Add</a>
        <select name="coupon-selected mb-0" size="5" style="width:100px;" multiple>
            @foreach (var coupon in strCouponsToAddToClient)
            {
                <option>@coupon</option>
            }
        </select>
        <div>
            <a class="button is-danger is-small  is-link is-outlined mx-2" @onclick="Clear">Clear</a>
            <p class="is-size-7 is-small mt-1 ml-3">@strCouponsToAddToClient.Count Coupons selected</p>
        </div>
    </div>
    <button class="button is-success is-link is-outlined mx-1 mt-0" @onclick="AddCouponAsync" disabled=@DisabledAddCouponButton()>Add Coupon</button>
</div>

@code {
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    [Parameter] public Client client { get; set; }
    List<Coupon> coupons = new List<Coupon>();
    private bool selected;
    private int selectedValue;
    private List<string> strCouponsToAddToClient = new List<string>();
    private List<int> intCouponsToAddToClient = new List<int>();
    List<ClientCoupon> clientCouponList = new List<ClientCoupon>();

    private List<string> TRCIdBeforeAdd = new List<string>();
    private List<string> TRCIdAfterAdd = new List<string>();

    List<Coupon> couponsToAddToClient = new List<Coupon>();

    protected async override Task OnInitializedAsync()
    {
        coupons = await couponServices.GetAllCouponAsync();

    }

    private void Clear()
    {
        intCouponsToAddToClient = new List<int>();
        strCouponsToAddToClient = new List<string>();
        couponsToAddToClient = new List<Coupon>();
        clientCouponList = new List<ClientCoupon>();
    }

    private async Task AddCouponAsync()
    {
        TRCIdBeforeAdd = new List<string>();
        TRCIdAfterAdd = new List<string>();
        NotificationMessage notification;
        int notificationDuration = 10000;

        await LoadTRCIdAsync(TRCIdBeforeAdd);
        foreach (var coupon in couponsToAddToClient)
        {
            clientCouponList.Add(new ClientCoupon
            {
                ClientId = client.Id,
                CouponId = coupon.Id,
                Date = DateTime.Now.ToString(),
                SpentPages = 0
            });
        }
        client.ClientCoupons = clientCouponList;

        if (clientCouponServices.AddListClientCouponAsyncWithSQL(clientCouponList))
        {
            await ShowNotificationAsync(BuildNotificationMessage(NotificationSeverity.Success,
                                                                    client.Email, "Coupon has been added", notificationDuration));

            var options = new ModalOptions()
            {
                HideCloseButton = true,
                DisableBackgroundCancel = true
            };

            var messageForm = myModal.Show<SpinnerComponent>($"Sending Email...", options);
            var result = await messageForm.Result;


        }
        else
        {
            var messageForm = myModal.Show<SpinnerComponent>($"ERROR: The coupons could not have been added.");
            var result = await messageForm.Result;
        }

        coupons = await couponServices.GetAllCouponAsync();
        selected = true;
        refreshServices.CallRequestRefresh();
        await LoadTRCIdAsync(TRCIdAfterAdd);

        List<string> trcIdResultList = TRCIdAfterAdd.Where(p => !TRCIdBeforeAdd.Any(p2 => p2 == p)).ToList();

        if (SendEmailWithVariousAttachment(trcIdResultList))
        {
            await ShowNotificationAsync(BuildNotificationMessage(NotificationSeverity.Success,
                                                                    "Emails", "have been sent", notificationDuration));
        }

        Clear();
    }

    private async Task AddCouponToSelectBoxAsync()
    {
        if (selected)
        {
            selected = false;
        }
        //To add only one type of coupon
        //if (selectedValue != 0 && intCouponsToAddToClient.Contains(selectedValue) == false)
        if (selectedValue != 0)
        {
            intCouponsToAddToClient.Add(selectedValue);
            Coupon couponToAddToClient = await couponServices.GetCouponAsync(selectedValue);
            couponsToAddToClient.Add(couponToAddToClient);
            strCouponsToAddToClient.Add(couponToAddToClient.Name);
        }
    }

    private bool DisabledAddCouponButton()
    {
        return strCouponsToAddToClient.Count == 0 ? true : false;
    }

    private bool SendEmails(List<string> trcIdResultList)
    {
        Pdf pdfHelper = new Pdf();
        int i = 0;
        try
        {
            foreach (var item in strCouponsToAddToClient)
            {
                MemoryStream stream = pdfHelper.Create(item, trcIdResultList[i]);
                emailHelper.SendStreamByEmail(client.Email, $"Tu bono Tinta Red | Id: {trcIdResultList[i]}", "Aqui deberia estar tu bono", trcIdResultList[i++], stream);
            }

            return true;
        }
        catch (Exception)
        {
            return false;
        }

    }

    private bool SendEmailWithVariousAttachment(List<string> trcIdResultList)
    {
        Pdf pdfHelper = new Pdf();
        int i = 0;
        List<MemoryStream>
            streamList = new List<MemoryStream>
                ();
        try
        {
            foreach (var item in strCouponsToAddToClient)
            {
                MemoryStream stream = pdfHelper.Create(item, trcIdResultList[i++]);
                streamList.Add(stream);
            }
            emailHelper.SendStreamListByEmail(client.Email, $"Tu bono Tinta Red", "Aqui deberia estar tu bono", trcIdResultList, streamList);
            return true;
        }
        catch (Exception)
        {
            return false;
        }

    }

    private async Task LoadTRCIdAsync(List<string> TRCIdList)
    {
        Client clientEmail = await clientServices.GetClientAsync(client.Id);

        foreach (var clientCoupons in clientEmail.ClientCoupons)
        {
            TRCIdList.Add(clientCoupons.TRCId);
        }
    }

    async Task ShowNotificationAsync(NotificationMessage message)
    {
        notificationService.Notify(message);

        events.Add(DateTime.Now, $"{message.Severity} notification");
        await InvokeAsync(() => { StateHasChanged(); });
    }

    NotificationMessage BuildNotificationMessage(NotificationSeverity notification, string summary, string detail, int duration)
    {
        return new NotificationMessage()
        {
            Severity = notification,
            Summary = summary,
            Detail = detail,
            Duration = duration
        };
    }

}
