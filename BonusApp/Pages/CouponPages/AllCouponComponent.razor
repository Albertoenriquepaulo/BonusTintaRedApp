@page "/couponpurchased/allcoupon"
@inject ClientCouponServices clientCouponServices
@inject IJSRuntime JSRuntime
@inject IModalService myModal

<h3>Coupon List</h3>

@if (clientCoupons == null || clientCoupons.Count == 0)
{
    <h2>No Coupon Issued</h2>
    <a href="/" style="text-decoration: none;" class="button is-info  is-link is-outlined">Home</a>
}
else
{
    <div style="display: flex; flex-direction: row-reverse;" class="mb-2">
        <HandleDeleteButtonComponent OnAllowButtonStateChange="OnAllowButtonStateChange" />
    </div>

    <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="15"
                AllowSorting="true" Data="@radzenClientCouponList" TItem="RadzenClientCoupon" ColumnWidth="150px" Count="1">
        <Columns>
            <RadzenGridColumn TItem="RadzenClientCoupon" Width="35px" Property="Index" Title="#" />
            <RadzenGridColumn TItem="RadzenClientCoupon" Width="@colWidth" Property="TRCId" Title="Coupon Id" />
            <RadzenGridColumn TItem="RadzenClientCoupon" Width="@colWidth" Property="CouponName" Title="Coupon Type" />
            <RadzenGridColumn TItem="RadzenClientCoupon" Width="180px" Property="ClientEmail" Title="Client" />
            <RadzenGridColumn TItem="RadzenClientCoupon" Width="@colWidth" Property="CouponPages" Title="Pages" />
            <RadzenGridColumn TItem="RadzenClientCoupon" Width="@colWidth" Property="SpentPages" Title="Printed Pages" />
            <RadzenGridColumn TItem="RadzenClientCoupon" Width="@colWidth" Property="RemainingPages" Title="Remaining Pages" />
            <RadzenGridColumn TItem="RadzenClientCoupon" Property="ClientCoupon" Title="" Filterable="false" Sortable="false">
                <Template Context="data">
                    @{
                        url[0] = $"couponpurchased/discountpages/{data.ClientCoupon.Id}";
                        url[1] = $"couponpurchased/details/{data.ClientCoupon.Id}";
                    }
                    <a href="@(remainingPages == 0 ? "javascript:function() { return false; }": url[0])"
                       class="button is-success is-small is-link is-outlined" style="text-decoration:none;"
                       disabled=@(remainingPages == 0 ? true: false)>
                        Set Pages
                    </a>
                    <a href="@url[1]" class="button is-primary is-small is-link is-outlined" style="text-decoration:none;">
                        <span class="oi oi-magnifying-glass"></span>
                    </a>
                    <a @onclick="@(()=>HandleDelete(data.ClientCoupon))" class="button is-danger is-small is-link is-outlined" disabled=@disabled>
                        <span class="oi oi-trash"></span>
                    </a>
                </Template>

            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}

@code {
    private string colWidth = "100px";
    List<ClientCoupon> clientCoupons;
    List<RadzenClientCoupon> radzenClientCouponList;
    string[] url = new string[2];
    private int remainingPages;

    private bool disabled = true;

    protected async override Task OnInitializedAsync()
    {
        clientCoupons = await clientCouponServices.GetAllClientCouponAsync();
        MapClientCouponToRadzenClientCoupon();
    }

    private async Task HandleDelete(ClientCoupon clientCoupon)
    {
        if (disabled)
        {
            return;
        }
        var messageForm = myModal.Show<ConfirmDeleteComponent>($"Are you sure you want to delete {clientCoupon.TRCId} coupon?");
        var result = await messageForm.Result;

        if (result.Cancelled)
        {
            return;
        }

        if ((bool)result.Data)
        {
            await clientCouponServices.DeleteClientCouponAsync(clientCoupon);
            clientCoupons = await clientCouponServices.GetAllClientCouponAsync();
            MapClientCouponToRadzenClientCoupon();
        }
        this.StateHasChanged();
    }

    private void RemainingPages(int pages, int spentPages)
    {
        remainingPages = pages - spentPages;
    }

    void OnAllowButtonStateChange(bool value)
    {
        disabled = value;
    }

    private void MapClientCouponToRadzenClientCoupon()
    {
        radzenClientCouponList = new List<RadzenClientCoupon>();
        int index = 1;
        foreach (var clientCoupon in clientCoupons)
        {
            RemainingPages(clientCoupon.Coupon.Pages, clientCoupon.SpentPages);
            RadzenClientCoupon radzenClientCoupon = new RadzenClientCoupon
            {
                Index = index,
                TRCId = clientCoupon.TRCId,
                CouponName = clientCoupon.Coupon.Name,
                ClientEmail = clientCoupon.Client.Email,
                CouponPages = clientCoupon.Coupon.Pages,
                SpentPages = clientCoupon.SpentPages,
                RemainingPages = remainingPages,
                ClientCoupon = clientCoupon
            };
            radzenClientCouponList.Add(radzenClientCoupon);
            index++;
        }
    }
}