@page "/coupon"
@inject CouponServices couponServices
@inject IModalService myModal
@inject IStringLocalizer<Resource> localizer

<h3>@localizer["CouponTypes"]</h3>

<a style="text-decoration:none;" href="coupon/create" class="button is-primary is-link is-outlined is-small">@localizer["CreateCoupon"]</a>
<HandleDeleteButtonComponent OnAllowButtonStateChange="OnAllowButtonStateChange" />
@if (coupons == null || coupons.Count == 0)
{
    <h2>@localizer["NoCouponFound"]</h2>
}
else
{

    <RadzenGrid @ref="radzenCouponGrid" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="15"
                AllowSorting="true" Data="@radzenCouponList" TItem="RadzenCoupon" ColumnWidth="150px">
        <Columns>
            <RadzenGridColumn TItem="RadzenCoupon" Property="Coupon.Name" Title="@localizer["CouponType"]">
                <FooterTemplate>
                    @localizer["TotalCoupons"]: <b>@radzenCouponGrid.View.Count()</b>
                </FooterTemplate>
            </RadzenGridColumn>

            <RadzenGridColumn TItem="RadzenCoupon" Property="Coupon.Pages" Title="@localizer["Pages"]" />
            <RadzenGridColumn TItem="RadzenCoupon" Property="Id" Title="" Filterable="false" Sortable="false">
                <Template Context="data">
                    @{
                        url = $"coupon/edit/{data.Coupon.Id.ToString()}";
                    }
                    <a href="@url" class="button is-info is-small is-outlined" style="text-decoration:none;">
                        <span class="oi oi-pencil"></span> @*EDIT*@
                    </a>
                    <a @onclick="@(()=>HandleDelete(data.Coupon))" class="button is-danger is-link  is-small is-outlined" disabled=@disabled>
                        <span class="oi oi-trash"></span> @*DELETE*@
                    </a>
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
    <BackButtonComponent />
}

@code {
    RadzenGrid<RadzenCoupon> radzenCouponGrid;
    List<Coupon> coupons;
    List<RadzenCoupon> radzenCouponList;
    string url;

    private bool disabled = true;

    protected async override Task OnInitializedAsync()
    {
        coupons = await couponServices.GetAllCouponAsync();
        MapClientToRadzenClient();
    }

    private async Task HandleDelete(Coupon coupon)
    {
        if (disabled)
        {
            return;
        }
        var messageForm = myModal.Show<ConfirmDeleteComponent>(localizer["AreYouSureToDeleteCoupon"] + $" {coupon.Name}?");
        var result = await messageForm.Result;

        if (result.Cancelled)
        {
            return;
        }

        if ((bool)result.Data)
        {
            await couponServices.DeleteCouponAsync(coupon);
            coupons = await couponServices.GetAllCouponAsync();
            MapClientToRadzenClient();
        }
    }

    void OnAllowButtonStateChange(bool value)
    {
        disabled = value;
    }

    private void MapClientToRadzenClient()
    {
        radzenCouponList = new List<RadzenCoupon>();
        for (int i = 0; i < coupons.Count; i++)
        {
            RadzenCoupon radzenClient = new RadzenCoupon
            {
                Coupon = coupons[i],
                Index = i + 1
            };
            radzenCouponList.Add(radzenClient);
        }
    }
}