@page "/coupon"
@inject CouponServices couponServices
@inject IModalService myModal

<h3>Coupon Types</h3>

<a style="text-decoration:none;" href="coupon/create" class="button is-primary is-link is-outlined is-small">Create Coupon</a>
<HandleDeleteButtonComponent OnAllowButtonStateChange="OnAllowButtonStateChange" />
@if (coupons == null || coupons.Count == 0)
{
    <h2>No Coupon found</h2>
}
else
{
    <div class="table-container">
        <table class="table is-striped">
            <thead>
                <tr class="th has-text-centered">
                    <th></th>
                    <th>Name</th>
                    <th>Pages</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var coupon in coupons)
                {
                    url = $"coupon/edit/{coupon.Id.ToString()}";
                    <tr class="has-text-centered">
                        <td style="vertical-align: middle">@(index++)</td>
                        <td style="vertical-align: middle">@coupon.Name</td>
                        <td style="vertical-align: middle">@coupon.Pages</td>
                        <td style="vertical-align: middle">
                            <a href="@url" class="button is-info is-small is-outlined" style="text-decoration:none;">
                                <span class="oi oi-pencil"></span> @*EDIT*@
                            </a>
                            <a @onclick="@(()=>HandleDelete(coupon))" class="button is-danger is-link  is-small is-outlined" disabled=@disabled>
                                <span class="oi oi-trash"></span> @*DELETE*@
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    List<Coupon> coupons;
    private int index;
    string url;

    private bool disabled = true;

    protected async override Task OnInitializedAsync()
    {
        index = 1;
        coupons = await couponServices.GetAllCouponAsync();
    }

    private async Task HandleDelete(Coupon coupon)
    {
        if (disabled)
        {
            return;
        }
        var messageForm = myModal.Show<ConfirmDeleteComponent>($"Are you sure you want to delete the {coupon.Name} coupon?");
        var result = await messageForm.Result;

        if (result.Cancelled)
        {
            return;
        }

        if ((bool)result.Data)
        {
            await couponServices.DeleteCouponAsync(coupon);
            coupons = await couponServices.GetAllCouponAsync();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        index = 1;
    }

    void OnAllowButtonStateChange(bool value)
    {
        disabled = value;
    }
}