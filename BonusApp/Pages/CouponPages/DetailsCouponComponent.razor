@page "/couponpurchased/details/{Id:int}"
@inject CouponServices couponServices
@inject ClientCouponServices clientCouponServices
@inject TransactionServices transactionsServices
@inject IStringLocalizer<Resource> localizer

<h3>@localizer["CouponDetails"]</h3>

<div class="content">
    <p><strong>Client: </strong>@clientCoupon.Client.Email</p>
    <div class="card mb-3" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">
                @localizer["CouponId"]:
                <a style="text-decoration:underline" data-toggle="tooltip" data-placement="top" title="@localizer["ClickToSetPages"]"
                   href=@($"couponpurchased/discountpages/{clientCoupon.Id}")>
                    @clientCoupon.TRCId
                </a>
                @if (totalRemainingPages != 0)
                {
                    <PdfDownloadComponent CouponName="@coupon.Name" TRCId="@clientCoupon.TRCId" />
                }
            </h5>
            <h6 class="card-subtitle mb-2 text-muted">@localizer["CouponType"]: @coupon.Name</h6>
            <h6 class="card-subtitle mb-2 text-muted">@localizer["TotalCouponPages"]:  @totalCouponPages</h6>
            <h6 class="card-subtitle mb-2 text-muted">@localizer["IssuedDate"]:  @clientCoupon.Date</h6>
            <p class="card-text has-text-link mb-0 pb-0">@localizer["RemainingPages"]: @totalRemainingPages </p>
            <p class="card-text has-text-danger mt-0 pt-0">@localizer["PrintedPages"]: @(totalCouponPages - totalRemainingPages) </p>
        </div>
    </div>
    <p class="mb-2 pt-3 has-text-grey-light is-italic">@localizer["TotalTransactions"]: @transactions.Count</p>
    @if (transactions.Count != 0)
    {
        <div class="table-container mt-0">
            <table class="table is-striped align-middle" id="myTable">
                <thead>
                    <tr class="th has-text-centered">
                        <th class="mt-0 p-0"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in transactions)
                    {
                        <tr>
                            <td>
                                <div>
                                    <p class="is-marginless"><strong>@localizer["TransactionDate"]:     </strong>@item.Date</p>
                                    <p class="is-marginless"><strong>@localizer["PrintedPages"]: </strong>@item.SpentPages</p>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<div class="field is-grouped">
    <p class="control">
        <a href="@(totalRemainingPages == 0 ? "javascript:function() { return false; }": url)"
           class="button is-success is-link is-outlined" style="text-decoration:none;"
           disabled=@(totalRemainingPages == 0 ? true: false)>
            @localizer["SetPagesToDiscount"]
        </a>
    </p>
    <p class="control">
        <BackButtonComponent />
    </p>
</div>

@code {
    [Parameter] public int Id { get; set; }
    private List<Transaction> transactions { get; set; }
    private ClientCoupon clientCoupon { get; set; }
    private Coupon coupon;
    private int totalCouponPages { get; set; }
    private int totalRemainingPages { get; set; }
    string url;

    protected async override Task OnInitializedAsync()
    {
        clientCoupon = await clientCouponServices.GetCouponIdByClientCouponIdAsync(Id);
        coupon = await couponServices.GetCouponAsync(clientCoupon.CouponId);
        totalCouponPages = (await couponServices.GetCouponAsync(clientCoupon.CouponId)).Pages;
        transactions = await transactionsServices.GetAllTransactionByCouponIdAndClientCouponIdAsync(clientCoupon.CouponId, clientCoupon.Id);
        url = $"couponpurchased/discountpages/{clientCoupon.Id}";

        if (transactions.Count > 0)
        {
            foreach (var item in transactions)
            {
                totalRemainingPages += (await transactionsServices.GetSpentPagesByTransactionId(item.Id));
            }
        }
        totalRemainingPages = totalCouponPages - totalRemainingPages;
    }
}