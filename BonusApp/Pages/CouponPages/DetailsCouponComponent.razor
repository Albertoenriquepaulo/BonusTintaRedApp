@page "/couponpurchased/details/{Id:int}"
@inject CouponServices couponServices
@inject ClientCouponServices clientCouponServices
@inject TransactionServices transactionsServices
<h3>Coupon Details</h3>




<div class="content">
    <p><strong>Client: </strong>@clientCoupon.Client.Email</p>
    <div class="card mb-3" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">
                Coupon Id: <a style="text-decoration:underline" data-toggle="tooltip" data-placement="top" title="Set pages to discount"
                              href=@($"couponpurchased/discountpages/{clientCoupon.Id}")>
                    @clientCoupon.TRCId
                </a>
            </h5>
            <h6 class="card-subtitle mb-2 text-muted">Total coupon pages:  @totalCouponPages</h6>
            @*<h6 class="card-subtitle mb-2 text-muted">Issued:  @clientCoupon.Date.ToString("MM/dd/yyyy hh:mm tt")</h6>*@
            <h6 class="card-subtitle mb-2 text-muted">Issued:  @clientCoupon.Date</h6>
            <p class="card-text">Remaining pages: @totalRemainingPages </p>
        </div>
    </div>

    @if (transactions.Count != 0)
    {
        <div class="table-container">
            <table class="table is-striped align-middle" id="myTable">
                <thead>
                    <tr class="th has-text-centered">
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in transactions)
                    {
                        <tr>
                            <td>
                                <div>
                                    <p class="is-marginless"><strong>Transaction Date:     </strong>@item.Date</p>
                                    <p class="is-marginless"><strong>Printed pages: </strong>@item.SpentPages</p>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    }
</div>

<div class="field is-grouped">
    <p class="control">
        <a href="@(totalRemainingPages == 0 ? "javascript:function() { return false; }": url)"
           class="button is-success is-link is-outlined" style="text-decoration:none;"
           disabled=@(totalRemainingPages == 0 ? true: false)>
            Discount Pages
        </a>
    </p>
    <p class="control">
        <a href="couponpurchased/allcoupon" style="text-decoration: none;" class="button is-info  is-link is-outlined">
            Back to List
        </a>
    </p>
</div>



@code {
    [Parameter] public int Id { get; set; }
    private List<Transaction> transactions { get; set; }
    private ClientCoupon clientCoupon { get; set; }
    private int totalCouponPages { get; set; }
    private int totalRemainingPages { get; set; }
    string url;

    protected async override Task OnInitializedAsync()
    {
        clientCoupon = await clientCouponServices.GetCouponIdByClientCouponIdAsync(Id);
        totalCouponPages = (await couponServices.GetCouponAsync(clientCoupon.CouponId)).Pages;
        //transactions = await transactionsServices.GetAllTransactionByCouponIdAsync(clientCoupon.CouponId, clientCoupon.ClientId);
        transactions = await transactionsServices.GetAllTransactionByCouponIdAndClientCouponIdAsync(clientCoupon.CouponId, clientCoupon.Id);
        url = $"couponpurchased/discountpages/{clientCoupon.Id}";

        if (transactions.Count > 0)
        {
            foreach (var item in transactions)
            {
                totalRemainingPages += (await transactionsServices.GetSpentPagesByTransactionId(item.Id));
            }
        }
        totalRemainingPages = totalCouponPages - totalRemainingPages;
    }
}
